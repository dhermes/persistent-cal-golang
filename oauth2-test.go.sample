package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/calendar/v3"
)

const (
	clientId     = "REPLACE"
	clientSecret = "REPLACE"

	scope       = calendar.CalendarScope
	redirectURL = "urn:ietf:wg:oauth:2.0:oob"
)

var (
	cacheFile = flag.String("cache", "cache.json", "Token cache file")
	code      = flag.String("code", "", "Authorization Code")

	// Set up a configuration boilerplate.
	config = &oauth2.Config{
		ClientID:     clientId,
		ClientSecret: clientSecret,
		RedirectURL:  redirectURL,
		Scopes:       []string{scope},
		Endpoint:     google.Endpoint,
	}
)

func getTokenFromFile(f string) (*oauth2.Token, error) {
	file, err := os.Open(f)
	if err != nil {
		return nil, err
	}
	defer file.Close()
	token := &oauth2.Token{}
	if err := json.NewDecoder(file).Decode(token); err != nil {
		return nil, err
	}
	return token, nil
}

func putTokenToFile(f string, token *oauth2.Token) error {
	file, err := os.OpenFile(f, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		return err
	}
	if err := json.NewEncoder(file).Encode(token); err != nil {
		file.Close()
		return err
	}
	if err := file.Close(); err != nil {
		return err
	}
	return nil
}

func main() {
	flag.Parse()

	token, err := getTokenFromFile(*cacheFile)
	if err != nil {
		if *code == "" {
			// Redirect user to Google's consent page to ask for permission
			// for the scopes specified above.
			url := config.AuthCodeURL("")
			fmt.Println("Visit URL to get a code then run again with -code=YOUR_CODE")
			fmt.Println(url)
			os.Exit(1)
		} else {
			// Handle the exchange code.
			token, err := config.Exchange(oauth2.NoContext, *code)
			if err != nil {
				log.Fatal(err)
				os.Exit(1)
			}
			putTokenToFile(*cacheFile, token)
		}
	}

	client := config.Client(oauth2.NoContext, token)
	fmt.Println(client)
}
